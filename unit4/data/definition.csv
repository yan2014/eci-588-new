definition
"There have already been attempts in this direction by people engaged in computer hobbyist clubs and in running computer drop-in centers. In most cases, although the experiments have been interesting and exciting, they have failed to make it because they were too primitive. Their computers simply did not have the power needed for the most engaging and shareable kinds of activities. Their visions of how to integrate computational thinking into everyday life was insufficiently developed. But there will be more tries, and more and more. And eventually, somewhere, all the pieces will come together and it will catch"
"CT involves solving problems, designing systems, and understanding human behavior, by drawing on the concepts fundamental to computer science. CT includes a range of mental tools that reflect the breadth of the field of computer science [...]. It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use."
"CT is a problem-solving process that includes (but is not limited to) the following characteristics: formulating problems in a way that enables us to use a computer and other tools to help solve them; logically organizing and analyzing data; representing data through abstractions such as models and simulations; automating solutions through algorithmic thinking (a series of ordered steps); identifying, analyzing, and implementing possible solutions with the goal of achieving the most efficient and effective combination of steps and resources; and generalizing and transferring this problem-solving process to a wide variety of problems."
"[…] an approach to solving problems in a way that can be implemented with a computer. Students become not merely tool users but tool builders. They use a set of concepts, such as abstraction, recursion, and iteration, to process and analyze data, and to create real and virtual artifacts. CT is a problem-solving methodology that can be automated and transferred and applied across subjects."
"CT draws on concepts and practices that are fundamental to computing and computer science. It includes epistemic and representational practices, such as problem representation, abstraction, decomposition, simulation, verification, and prediction. However, these practices are also central to the development of expertise in scientific and mathematical disciplines."
"[…] abstractions and pattern generalizations (including models and simulations); systematic processing of information; symbol systems and representations; algorithmic notions of flow of control; structured problem decomposition (modularizing); iterative, recursive, and parallel thinking; conditional logic; efficiency and performance constraints; and debugging and systematic error detection."
"We believe that CT is a problem-solving methodology that expands the realm of computer science into all disciplines, providing a distinct means of analyzing and developing solutions to problems that can be solved computationally. With its focus on abstraction, automation, and analysis, CT is a core element of the broader discipline of computer science."
"“intellectual core is about formulating things with enough clarity, and in a systematic enough way, that one can tell a computer how to do them [...] CT is a broad story, because there are just a lot more things that can be handled computationally [...] But how does one tell a computer anything? One has to have a language”"